import telebot
import sqlite3

import search_movie as search
# import filter_movie as filter
import database_logic as data

from telebot import types
from kinopoisk_unofficial.kinopoisk_api_client import KinopoiskApiClient
from kinopoisk_unofficial.model.filter_country import FilterCountry
from kinopoisk_unofficial.model.filter_order import FilterOrder
from kinopoisk_unofficial.model.filter_genre import FilterGenre
from kinopoisk_unofficial.request.films.film_search_by_filters_request import FilmSearchByFiltersRequest


api_client = KinopoiskApiClient("api-token")
bot = telebot.TeleBot('tg-token')


@bot.message_handler(commands=['start'])
def start(message):
    conn = sqlite3.connect(f'database/client{message.chat.id}_info.sql')
    cur = conn.cursor()

    cur.execute('CREATE TABLE IF NOT EXISTS films (id varchar(50), name varchar(50), year varchar(4))')
    conn.commit()
    cur.close()

    file = open(f"tmp_for_clients/{message.chat.id}.txt", "w")
    file.close()

    markup = types.InlineKeyboardMarkup(row_width=1)

    search_btn = types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º", callback_data='search')
    filter_btn = types.InlineKeyboardButton("üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º", callback_data='filter')
    saves_btn = types.InlineKeyboardButton("üíø –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ", callback_data='saves')
    help_btn = types.InlineKeyboardButton("‚ùì –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", callback_data='help')

    markup.add(search_btn, filter_btn, saves_btn, help_btn)
    text = ("–ü—Ä–∏–≤–µ—Ç! üëãüé¨ –Ø –ö–∏–Ω–æ–ë–æ—Ç. –ï—Å–ª–∏ —Ç—ã —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏ —Ñ–∏–ª—å–º, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö –∏–ª–∏ —É–∑–Ω–∞—Ç—å –æ —Å—Ö–æ–∂–∏—Ö "
            "—Ñ–∏–ª—å–º–∞—Ö, —è –≥–æ—Ç–æ–≤ —Ç–µ–±–µ –ø–æ–º–æ—á—å! –ü—Ä–æ—Å—Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ. –ù–∞—à–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞—é—Ç –ø–æ–∏—Å–∫ "
            "—Ñ–∏–ª—å–º–æ–≤, –æ—Ç–±–æ—Ä —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è —Ñ–∏–ª—å–º–æ–≤, –∞ —Ç–∞–∫–∂–µ –ø—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ "
            "—Ç–µ–∫—É—â–∏—Ö –∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å–º–∞—Ö. –ï—Å–ª–∏ —É —Ç–µ–±—è –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã - —Å–ø—Ä–∞—à–∏–≤–∞–π! üîçüîóüíæ")
    bot.send_message(message.chat.id, text, reply_markup=markup)


@bot.callback_query_handler(func=lambda call:True)
def callback_worker(callback):
    if callback.data == "search":
        msg = bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:")
        bot.register_next_step_handler(msg, search.search)
    elif callback.data == "filter":
        msg = bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∂–∞–Ω—Ä —Ñ–∏–ª—å–º–∞:")
        bot.register_next_step_handler(msg, process_genre_step)
    elif callback.data == "saves":
        msg = bot.send_message(callback.message.chat.id, "–û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —Ñ–∏–ª—å–º—ã:")
        data.show_movies_list(msg)
    elif callback.data == "save":
        msg = bot.send_message(callback.message.chat.id, "–î–æ–±–∞–≤–ª—é —Ñ–∏–ª—å–º –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ")
        data.add_to_list(msg)
    elif callback.data == "same":
        msg = bot.send_message(callback.message.chat.id, "–°–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –ø–æ–¥–æ–±—Ä–∞—Ç—å? (–¥–æ 10)")
        bot.register_next_step_handler(msg, search.show_related)
    elif callback.data == "delete":
        msg = bot.send_message(callback.message.chat.id, "–í–≤–µ–¥–∏ ID —Ñ–∏–ª—å–º–∞ –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∏–∑ —Å–ø–∏—Å–∫–∞:")
        bot.register_next_step_handler(msg, data.delete_from_list)
    elif callback.data == "help":
        markup = types.InlineKeyboardMarkup(row_width=1)

        search_btn = types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º", callback_data='search')
        filter_btn = types.InlineKeyboardButton("üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º", callback_data='filter')
        saves_btn = types.InlineKeyboardButton("üíø –û—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ", callback_data='saves')

        rule_text = f"–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–º–æ—á—å —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º:\n" \
                    f"üîç –ò—Å–∫–∞—Ç—å —Ñ–∏–ª—å–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏ –≤—ã–¥–∞–≤–∞—Ç—å –∫—Ä–∞—Ç–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è.\n" \
                    f"üîçüîó –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º—ã –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º.\n" \
                    f"üíæ –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å–º –≤ –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ.\n"

        markup.add(search_btn, filter_btn, saves_btn)
        bot.send_message(callback.message.chat.id, rule_text, reply_markup=markup)



genre = None
from_year = 0
to_year = 0
rating = 0.0
country = None


def process_genre_step(message):
    global genre
    genre = str(message.text)
    text = """–° –∫–∞–∫–æ–≥–æ –ø–æ –∫–∞–∫–æ–π –≥–æ–¥ –∏—Å–∫–∞—Ç—å? (1980-1990)
    —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –≥–æ–¥–∞–º–∏ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω—å—à–µ 1!"""
    msg = bot.send_message(message.chat.id, text)
    bot.register_next_step_handler(msg, process_year_step)


def process_year_step(message):
    global from_year
    global to_year

    msg = str(message.text)
    try:
        time = msg.split("-")
        from_year = int(time[0])
        to_year = int(time[1])
        if from_year >= to_year:
            msg = bot.send_message(message.chat.id, "–ü–µ—Ä–≤—ã–π –≥–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–µ–Ω—å—à–µ –≤—Ç–æ—Ä–æ–≥–æ!")
            bot.register_next_step_handler(msg, process_year_step)
        else:
            msg = bot.send_message(message.chat.id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ (–æ—Ç 1 –¥–æ 10)?")
            bot.register_next_step_handler(msg, process_rating_step)
    except:
        msg = bot.send_message(message.chat.id, "–ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1900 - 2023")
        bot.register_next_step_handler(msg, process_year_step)



def process_rating_step(message):
    global rating
    try:
        rating = float(message.text)
        msg = bot.send_message(message.chat.id, "–°—Ç—Ä–∞–Ω–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞?")
        bot.register_next_step_handler(msg, process_country_step)
    except:
        msg = bot.send_message(message.chat.id, "–†–µ–π—Ç–∏–Ω–≥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 10")
        bot.register_next_step_handler(msg, process_country_step)



def process_country_step(message):
    markup = types.InlineKeyboardMarkup(row_width=1)

    search_btn = types.InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ —Ñ–∏–ª—å–º", callback_data='search')
    filter_btn = types.InlineKeyboardButton("üîç –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ñ–∏–ª—å–º –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º", callback_data='filter')
    help_btn = types.InlineKeyboardButton("‚ùì –ß—Ç–æ —Ç—ã —É–º–µ–µ—à—å?", callback_data='help')
    markup.add(search_btn, filter_btn, help_btn)

    global country
    global genre
    global from_year
    global to_year
    global rating
    country = message.text

    request = FilmSearchByFiltersRequest()
    request.year_from = from_year
    request.year_to = to_year
    request.rating_from = rating
    request.order = FilterOrder.RATING
    request.add_genre(FilterGenre(1, genre))
    # genre_list = genre.split(", ")
    # id_iter = 1
    # for genre_ in genre_list:
    #     request.add_genre(FilterGenre(id_iter, genre_))
    #     id_iter += 1

    request.add_country(FilterCountry(1, country))

    # –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    films = api_client.films.send_film_search_by_filters_request(request)
    film_info = ""
    if len(films.items) != 0:
        iter = 1
        for film in films.items[:5]:
            # —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∏–ª—å–º–µ
            film_info += f"#{iter} : {film.name_ru}\n" \
                         f"–ì–æ–¥: {film.year}\n" \
                         f"–†–µ–π—Ç–∏–Ω–≥: {film.rating_kinopoisk}\n" \
                         f"–ü–æ—Å—Ç–µ—Ä —Ñ–∏–ª—å–º–∞: {film.poster_url}\n\n"
            bot.send_message(message.chat.id, film_info)
            film_info = ""
            iter += 1

        film_info = f"–í–æ—Ç —Ñ–∏–ª—å–º—ã –ø–æ –≤–∞—à–µ–º—É –∫—Ä–∏—Ç–µ—Ä–∏—é –∏–∑ –ö–∏–Ω–æ–ü–æ–∏—Å–∫–∞"
        bot.send_message(message.chat.id, film_info, reply_markup=markup)
    else:
        film_info = f"–û–π! –ß—Ç–æ —Ç–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑"
        bot.send_message(message.chat.id, film_info, reply_markup=markup)


bot.polling()